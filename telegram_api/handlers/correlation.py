from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from loguru import logger

from moex_api.get_data_moex import get_stock_data
from telegram_api.essence.keyboards import correlation_menu
from telegram_api.essence.state_machine import CorrelationStates
from utils.correlation_calculator import calculate_correlation



async def cmd_correlation(message: types.Message):
    await message.answer(
        "üìä <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ MOEX</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: SBER, GAZP, LKOH):",
        parse_mode="HTML"
    )
    await CorrelationStates.waiting_for_tickers.set()


async def process_tickers(message: types.Message, state: FSMContext):
    tickers = [ticker.strip().upper() for ticker in message.text.split(',')]
    if len(tickers) < 2:
        await message.answer("‚ùå –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ö–æ—Ç—è –±—ã 2 —Ç–∏–∫–µ—Ä–∞!")
        return
    await state.update_data(tickers=tickers)
    await message.answer("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=correlation_menu(), parse_mode="HTML")
    await CorrelationStates.waiting_for_period.set()


async def process_period(message: types.Message, state: FSMContext):
    period_map = {
        "1 –º–µ—Å—è—Ü": 30,
        "3 –º–µ—Å—è—Ü–∞": 90,
        "6 –º–µ—Å—è—Ü–µ–≤": 180,
        "1 –≥–æ–¥": 365
    }
    if message.text not in period_map:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return
    days = period_map[message.text]
    user_data = await state.get_data()
    tickers = user_data['tickers']
    await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é...")
    try:
        data = await get_stock_data(tickers, days)
        if not data:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤")
            return
        correlation_matrix = calculate_correlation(data)
        response = f"üìä <b>–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –∑–∞ {message.text}:</b>\n\n"
        for i, ticker1 in enumerate(tickers):
            for j, ticker2 in enumerate(tickers):
                if i < j:
                    corr = correlation_matrix.loc[ticker1, ticker2]
                    response += f"üîó {ticker1} - {ticker2}: {corr:.3f}\n"
        response += "\nüìà <b>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:</b>\n"
        response += "1.0 - –ø–æ–ª–Ω–∞—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è\n"
        response += "0.0 - –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏\n"
        response += "-1.0 - –ø–æ–ª–Ω–∞—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è\n\n"
        response += "üí° <i>–ó–Ω–∞—á–µ–Ω–∏—è –≤—ã—à–µ 0.7 —Å—á–∏—Ç–∞—é—Ç—Å—è —Å–∏–ª—å–Ω–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–µ–π</i>"
        await message.answer(response, parse_mode="HTML")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.finish()


def register_correlation_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(cmd_correlation, lambda callback: callback.data == "correlation")
    dp.register_message_handler(process_tickers, state=CorrelationStates.waiting_for_tickers)
    dp.register_message_handler(process_period, state=CorrelationStates.waiting_for_period)


if __name__ == '__main__':
    logger.info('Running correlation.py from module telegram_api/handlers')
